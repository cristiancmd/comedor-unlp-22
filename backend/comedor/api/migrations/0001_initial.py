# Generated by Django 3.2.7 on 2021-09-25 19:00

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator("^[a-zA-ZÀ-ÿ\\u00f1\\u00d1\\'\\s\\-]+$", 'Este campo solo acepta caracteres alfabéticos.')], verbose_name='Nombre')),
            ],
            options={
                'verbose_name': 'Componente/Plato',
                'verbose_name_plural': 'Componentes/Platos',
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator("^[a-zA-ZÀ-ÿ\\u00f1\\u00d1\\'\\s\\-]+$", 'Este campo solo acepta caracteres alfabéticos.')], verbose_name='Nombre')),
                ('measure', models.CharField(choices=[('KG', 'Kilogramo'), ('GR', 'Gramo'), ('UN', 'Unidad'), ('LT', 'Litro')], max_length=30, verbose_name='Unidad de medida')),
            ],
            options={
                'verbose_name': 'Ingrediente',
                'verbose_name_plural': 'Ingredientes',
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, validators=[django.core.validators.RegexValidator("^[a-zA-ZÀ-ÿ\\u00f1\\u00d1\\'\\s\\-]+$", 'Este campo solo acepta caracteres alfabéticos.')], verbose_name='Nombre')),
                ('celiac', models.BooleanField(blank=True, default=False, null=True, verbose_name='Menú celíaco')),
                ('vegetarian', models.BooleanField(blank=True, default=False, null=True, verbose_name='Menú vegetariano')),
                ('image', models.ImageField(blank=True, null=True, upload_to='image_menus', verbose_name='Foto del menú')),
                ('enabled', models.BooleanField(default=True, verbose_name='Habilitado')),
                ('servings', models.IntegerField(verbose_name='Porciones')),
                ('price', models.FloatField(verbose_name='Precio')),
                ('dessert', models.ManyToManyField(related_name='dessert_menus', to='api.Component', verbose_name='Postre')),
                ('drink', models.ManyToManyField(related_name='drink_menus', to='api.Component', verbose_name='Bebida')),
                ('principal', models.ManyToManyField(related_name='principal_menus', to='api.Component', verbose_name='Plato principal')),
                ('starter', models.ManyToManyField(related_name='starter_menus', to='api.Component', verbose_name='Entrada')),
            ],
            options={
                'verbose_name': 'Menu',
                'verbose_name_plural': 'Menus',
            },
        ),
        migrations.CreateModel(
            name='IngredientsWithMeasure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='Cantidad')),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.component')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='component_ingredients', to='api.ingredient')),
            ],
            options={
                'verbose_name': 'Ingredientes del plato',
                'verbose_name_plural': 'Ingredientes en los platos',
            },
        ),
        migrations.AddField(
            model_name='component',
            name='ingredients',
            field=models.ManyToManyField(through='api.IngredientsWithMeasure', to='api.Ingredient', verbose_name='Ingredientes'),
        ),
    ]
